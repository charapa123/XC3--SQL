-- This combines all the data we have currently used to create a view for tableau.
-- note there are some duplicates for quests as it is difficult to define which colony they belong to
CREATE OR REPLACE VIEW XC3_FULL_DATASET AS (
WITH QUESTS_PER_COLONY AS (
SELECT DISTINCT COLONY,RECCOMENDED_LEVEL,CHAPTER,POST_GAME_QUEST,HOW_TO_ACCEPT_QUEST,QUEST_NAME,
CONTAINS(HOW_TO_ACCEPT_QUEST,COLONY) AS FILTER
-- CONTAINS(HOW_TO_ACCEPT_QUEST,CHARACTER1) AS FILTER
FROM(
SELECT *,'1' AS HI
FROM XC3_COLONIES) AS A

INNER JOIN 


(SELECT *,'1' AS HI
FROM XC3_TEST_QUESTS) AS B

ON A.HI = B.HI
WHERE FILTER = TRUE
)
-- 1 to 1 join so we can see which colonies are mentioned in the quest conditions
,

QUESTS_PER_COLONY_CHARA AS (
SELECT DISTINCT COLONY,RECCOMENDED_LEVEL,CHAPTER,POST_GAME_QUEST,HOW_TO_ACCEPT_QUEST,QUEST_NAME,
CONTAINS(HOW_TO_ACCEPT_QUEST,CHARACTER1) AS FILTER
-- CONTAINS(HOW_TO_ACCEPT_QUEST,CHARACTER1) AS FILTER
FROM(
SELECT *,'1' AS HI
FROM XC3_CHARACTERS) AS A

INNER JOIN 


(SELECT *,'1' AS HI
FROM XC3_TEST_QUESTS) AS B

ON A.HI = B.HI
WHERE FILTER = TRUE
)
-- 1 to 1 join so we can see which quest conditions mention characters (then see which colony they belong too)
,

QUESTS_PER AS (

SELECT HEROS,QUEST_NAME,
--CONTAINS(HOW_TO_ACCEPT_QUEST,COLONY) AS FILTER
CONTAINS(QUEST,QUEST_NAME) AS FILTER
FROM(
SELECT *,'1' AS HI
FROM XC3_ASCENTION_PREQUISIT_QUESTS) AS A

INNER JOIN 


(SELECT *,'1' AS HI
FROM XC3_TEST_QUESTS) AS B

ON A.HI = B.HI
WHERE FILTER = TRUE
)
-- finding where standard quest relate to the prerequisit standard quests for hero queststo bring in other information

,

UNIQUE_QUESTS AS (
SELECT DISTINCT QUEST_NAME
FROM(
SELECT *
FROM QUESTS_PER_COLONY)
)
-- check how many quests there are turns out some quests involove multiple colonies
,
QUESTS_WITH_NO_COLONY AS (
SELECT B.QUEST_NAME,B.RECCOMENDED_LEVEL,B.CHAPTER,B.POST_GAME_QUEST,B.HOW_TO_ACCEPT_QUEST
FROM UNIQUE_QUESTS AS A
FULL JOIN XC3_TEST_QUESTS AS B ON A.QUEST_NAME = B.QUEST_NAME
WHERE A.QUEST_NAME IS NULL)
-- quests with no colony

,

QUEST_CHARACTER AS (

SELECT B.COLONY,B.RECCOMENDED_LEVEL,B.CHAPTER,B.POST_GAME_QUEST,B.HOW_TO_ACCEPT_QUEST,B.QUEST_NAME,B.FILTER
FROM QUESTS_WITH_NO_COLONY AS A
INNER JOIN QUESTS_PER_COLONY_CHARA AS B ON B.QUEST_NAME = A.QUEST_NAME
)
-- all quests that don't match with colony, matching to characters
,

ALL_QUESTS_FROM_CHARA_COLONY AS (
SELECT *
FROM QUEST_CHARACTER

UNION 

SELECT *
FROM QUESTS_PER_COLONY
)
-- finding all quests that relate to the colony directly and through characters to colony indirectly
,

ALL_QUESTS_PER_COLONY AS (


SELECT 'NULL' AS COLONY,B.RECCOMENDED_LEVEL,B.CHAPTER,B.POST_GAME_QUEST,B.HOW_TO_ACCEPT_QUEST,B.QUEST_NAME,TRUE AS FILTER
FROM ALL_QUESTS_FROM_CHARA_COLONY AS A
FULL JOIN XC3_TEST_QUESTS AS B ON A.QUEST_NAME = B.QUEST_NAME
WHERE A.QUEST_NAME IS NULL

UNION

SELECT *
FROM ALL_QUESTS_FROM_CHARA_COLONY)
-- combining all quests that match with colonies or characters to the quests that cannot be allocated to a colony directly or indirectly
,

ALL_QUESTS_WITH_HEROS AS (
SELECT COLONY,HEROS AS HERO_ASCENTION_QUEST,B.RECCOMENDED_LEVEL,B.CHAPTER,B.POST_GAME_QUEST,B.HOW_TO_ACCEPT_QUEST,B.QUEST_NAME
FROM QUESTS_PER AS A
RIGHT JOIN ALL_QUESTS_PER_COLONY AS B ON A.QUEST_NAME = B.QUEST_NAME)
-- combining data related for heros and prerequisit quests to all quests allocated to a colony
,

ALL_QUESTS_DONE AS (

SELECT COLONY,A.HERO,' ' AS RECOMMENDED_LEVEL,CHAPTER,'NULL' AS POST_GAME_QUEST, 'NULL' AS HOW_TO_ACCEPT_QUEST, HERO_QUEST
FROM XC3_HERO_QUESTS AS A 
INNER JOIN HERO_PER_COLONY AS B ON A.HERO = B.HERO

UNION

SELECT *
FROM ALL_QUESTS_WITH_HEROS
)
-- combining all quests and adding in hero quests which don't relate to any of the standard quests
,

CORRECTED_HERO_INFO AS (
SELECT URL AS IMAGES, ASCENTION_QUEST_NAME,HERO_INFO,HEROS
FROM (
SELECT URL,REGEXP_SUBSTR(URL,'m/(\\w+)',1,1,'e') AS HI
FROM HERO_INFO_URL) AS A

INNER JOIN 

(
SELECT IMAGES AS IM,ASCENTION_QUEST_NAME,HERO_INFO,HEROS,SPLIT_PART(SPLIT_PART(IMAGES,'/',3),'.',1) AS HI
FROM HERO_INFO) AS B

ON A.HI = B.HI)
-- readjusted URL's from AWS
,

CORRECTED_COLONIES AS (
SELECT URL AS IMAGES,COLONY,REGION,RN
FROM (
SELECT *,REGEXP_SUBSTR(URL,'m/(\\w+)',1,1,'e') AS HI
FROM HERO_INFO_URL) AS A

INNER JOIN 

(
SELECT IMAGES AS IM1,COLONY,REGION,SPLIT_PART(SPLIT_PART(IMAGES,'/',5),'.',1) AS HI,RN
FROM XC3_COLONIES) AS B

ON A.HI = B.HI
)
-- Readjusted URL's from AWS



SELECT A.REGION,SEQ,REGION_LINES,COLONIES AS COLONY,B.IMAGES,COLONY_LINES,D.HERO,D.ASCENTION_QUEST_NAME,E.RECOMMENDED_LEVEL,E.CHAPTER,E.POST_GAME_QUEST,E.HOW_TO_ACCEPT_QUEST,
HERO_QUEST,F.IMAGES AS HERO_IMAGES,HERO_INFO,MAIN_TABLE,VALUE,E.HERO AS HERO_ASCENTION,RN
FROM XC3_REGIONS AS A
INNER JOIN CORRECTED_COLONIES AS B ON A.REGION = B.REGION
INNER JOIN REGIONAL_COLONY_LOCATIONS AS C ON A.REGION = C.REGION AND B.COLONY = C.COLONIES
INNER JOIN HERO_PER_COLONY AS D ON D.COLONY = B.COLONY
FULL JOIN ALL_QUESTS_DONE AS E ON E.COLONY = B.COLONY
LEFT JOIN CORRECTED_HERO_INFO AS F ON F.HEROS = D.HERO
LEFT JOIN ASCENTION_QUEST_CONDITIONS AS G ON G.HEROS = D.HERO
-- combining all CTE's and Tables for View
)


;