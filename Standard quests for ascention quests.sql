CREATE OR REPLACE TABLE XC3_ASCENTION_PREQUISIT_QUESTS AS (

WITH HTML_REPLACE AS (
SELECT URL, REGEXP_REPLACE(HTMLCONTENT,'\\n','') AS HTML,
RTRIM(REGEXP_SUBSTR(HTML,'\\w+&#39'),'&#39') AS HERO,SPLIT_PART(REGEXP_SUBSTR(HTML,'Ascension Quest:.*?Walkthrough'),'|',1) AS ASCENTION_QUEST
FROM TIL_PORTFOLIO_PROJECTS.CHARALAMBOS_PERSONAL_PROJECT.MYHTMLDATAASCENTION)

,

HTML_SPLIT1 AS (

SELECT HTML,VALUE AS SPLIT1,URL,ASCENTION_QUEST,HERO
FROM HTML_REPLACE,
LATERAL SPLIT_TO_TABLE(HTML,'<\/h3')
)
,
HTML_SPLIT2 AS (

SELECT SPLIT1,URL,HTML,VALUE AS SPLIT2,REGEXP_SUBSTR(SPLIT2,'Standard') AS QUESTFILTER,REGEXP_SUBSTR(SPLIT2,'Unlock Conditions') AS QUESTFILTER1,
REGEXP_SUBSTR(SPLIT2,'Required Quests') AS QUESTFILTER2,REGEXP_SUBSTR(SPLIT2,'Lv') AS HI,
CASE WHEN HERO = 'Miyabi' AND REGEXP_REPLACE(ASCENTION_QUEST,'&#39;','') NOT LIKE '%Walkthrough%' THEN 'Mio'
ELSE HERO END AS HEROS,
CASE WHEN HEROS = 'Mio' THEN 'Ascension Quest: Side Story: Mio Walkthrough '
ELSE REGEXP_REPLACE(ASCENTION_QUEST,'&#39;','') END AS ASCENTION_QUEST_NAME
FROM HTML_SPLIT1,
LATERAL SPLIT_TO_TABLE(SPLIT1,'<\/h4>')

//centre,
)

,

ISURD AS (

SELECT HEROS,INDEX,SPLIT_PART( REGEXP_REPLACE( REGEXP_SUBSTR(VALUE,'(.*?)<\\/td>',1,1,'e'),'</td>    <td class="center"',''), '>',1) AS QUEST
,SPLIT_PART( REGEXP_REPLACE( REGEXP_SUBSTR(VALUE,'(.*?)<\\/td>',1,1,'e'),'</td>    <td class="center"',''), '>',2) AS RECOMMENDED_LEVEL,
ASCENTION_QUEST_NAME
FROM HTML_SPLIT2,
LATERAL SPLIT_TO_TABLE(SPLIT2,'<tr>    <td class="center">')
WHERE HEROS = 'Isurd' AND HI IS NOT NULL AND INDEX != 1
)
 ,

OTHER_HEROS AS(
SELECT *,REGEXP_SUBSTR(SPLIT2, 'Three Ravens') AS ASHERA,REGEXP_SUBSTR(SPLIT2,'Contrary') AS SEGIRI
FROM HTML_SPLIT2
WHERE HEROS IN('Fiona','Alexandria','Ashera','Segiri')
)
,
ALEXANDRIA AS (
SELECT HEROS,NO, REGEXP_REPLACE(QUEST,'\\(Recommended Level: Lv. \\d+\\)','') AS QUESTS,RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM(
SELECT HEROS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS NO,TRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(VALUE,'</td>  </tr></table><h3 class=''a-header--3'' id=''hm_6''>',''),'<b class=''a-bold''>',''),'</b>.<br>',' '),' <td>',''),'<a class=''a-link'' href=/games/Xenoblade-Chronicles-3/archives/\\d+>',''),'</a>,',''),'</b>'),'<span class=''a-red''>'),'</span>.</td>  </tr>  <tr>    <th>3',''),'</a>',''),'</td>  </tr>  <tr>    <th>2',''),'<br>','')) AS QUEST,REGEXP_SUBSTR(QUEST,'Lv. \\d+') AS RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM OTHER_HEROS,
LATERAL SPLIT_TO_TABLE(SPLIT2,'</th>')
WHERE HI IS NOT NULL AND QUESTFILTER IS NOT NULL AND INDEX > 3
)
)

,

FIONA AS (
SELECT HEROS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(VALUE,'<b class=''a-bold''>&quot;',''),'&quot;</b></td>  </tr>  <tr>    <td class="',''),'">',''),'<a class=''a-link'' href=/games/Xenoblade-Chronicles-3/archives/\\d+>',''),'</td>  </tr>  <tr>    <td class="',''),'</td>  </tr>  <tr>    <td class="',''),'</a>',''),'</td>  </tr></table><h3 class=''a-header--3'' id=''hm_6''>2.','') AS QUEST,' ' AS RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM OTHER_HEROS,
LATERAL SPLIT_TO_TABLE(SPLIT2,'center')
WHERE HEROS = 'Fiona' AND QUESTFILTER IS NOT NULL AND QUESTFILTER1 IS NOT NULL AND INDEX>1
)

,

ASHERA AS (

SELECT HEROS,NO, REGEXP_REPLACE(QUEST,'\\d+','') AS QUESTS,RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM(
SELECT HEROS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS NO,REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(VALUE,'class="center">',''),'</td>    <td',''),'</td>  </tr>'),' <a class=''a-link'' href=/games/Xenoblade-Chronicles-3/archives/386156',''),'</a> 60</table><h3 class=''a-header--3'' id=''hm_6''>',' '),'>','') AS QUEST,'Lv '||REGEXP_SUBSTR(QUEST,'\\d+') AS RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM OTHER_HEROS,
LATERAL SPLIT_TO_TABLE(SPLIT2, '<tr>    <td')
WHERE ASHERA IS NOT NULL AND INDEX > 1
)
)

,

SEGIRI AS (
SELECT HEROS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),SPLIT_PART(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(VALUE,'class="center">'),'width="85%"',''),'</td>  </tr>  <tr>    <td \\d',''),'<',0) AS QUEST,
' ' AS RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM OTHER_HEROS,
LATERAL SPLIT_TO_TABLE(SPLIT2,'</td>    <td')
WHERE SEGIRI IS NOT NULL AND INDEX > 1
)


//CASE WHEN QUESTFILTER2 = 'Required Quests' THEN 1 ELSE NULL END AS QUEST,
-- QUESTFILTER2 = 'Required Quests'
-- OR LAG(QUESTFILTER2, 1) OVER (ORDER BY (HEROS)) = 'Required Quests'
,

HTML_SPLIT_3 AS (

SELECT VALUE AS SPLIT3,HEROS,ASCENTION_QUEST_NAME,SPLIT2,URL,SPLIT1,QUESTFILTER1,QUESTFILTER2,HI
FROM HTML_SPLIT2,
LATERAL SPLIT_TO_TABLE(SPLIT2,'</td>')
WHERE HI IS NOT NULL AND HEROS IN ('Zeon','Juniper','Teach','Valdi')
)


,

HTML_SPLIT_4 AS (

SELECT VALUE AS SPLIT4,HEROS,ASCENTION_QUEST_NAME
FROM HTML_SPLIT_3,
LATERAL SPLIT_TO_TABLE(SPLIT3,REGEXP_SUBSTR(SPLIT3,'>'))
)
,

STANDARD_QUESTS AS (
SELECT *,TRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(SPLIT4,'<table.*',''),'  <tr'),'<th.*',''),'  </tr')
,'    <td class="center"',''),'<a class.*',''),'<h3',''),'<p.*',''),'<span',''),'</table.*',''),' class.*',''),'</p',''),'</a',''),'^\\d.*',''),'<td',''),'<b',''),'</th',''),'\\.','')) AS FILTER,
CASE WHEN FILTER = 'Recommended Level' THEN 'Recommended Levels'
ELSE FILTER END AS FILTER1,
CASE WHEN FILTER1 = 'Quests' THEN 1 
WHEN FILTER1 = 'Recommended Levels' THEN 2
ELSE NULL END AS NUMBER,
ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ORDER1
FROM HTML_SPLIT_4
WHERE FILTER != '' AND HEROS != 'Valdi')

,


VALDI_QUESTS AS(

SELECT *,RTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(SPLIT4,'<table.*',''),'  <tr'),'<th.*',''),'  </tr')
,'    <td class="center"',''),'<a class.*',''),'<h3',''),'<p.*',''),'<span',''),'</table.*',''),' class.*',''),'</p',''),'</a',''),'^\\d.*',''),'<td',''),'<b',''),'</th',''),'\\.',' '),'</bof',               ' '),'</b',' '),'</span',' ')) AS FILTER,
CASE WHEN FILTER = 'Recommended Level' THEN 'Recommended Levels'
ELSE FILTER END AS FILTER1,
CASE WHEN FILTER1 = 'Quests' THEN 1 
WHEN FILTER1 = 'Recommended Levels' THEN 2
ELSE NULL END AS NUMBER,
ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ORDER1
FROM HTML_SPLIT_4
WHERE FILTER != '' AND HEROS = 'Valdi')
,

VALDI_ORDER AS(
SELECT *,
CAST(CASE WHEN FILTER1 = 'Complete the Standard Quest' AND ORDER1 < 10 THEN 2 ELSE
REGEXP_SUBSTR(REGEXP_SUBSTR(FILTER1,'Phase \\d'),'\\d') END AS NUMBER(38)) AS PHASE,
COALESCE(PHASE, LAG(PHASE) IGNORE NULLS OVER (PARTITION BY HEROS ORDER BY ORDER1)) AS MULTI_ROW
FROM VALDI_QUESTS
)
//this was to make the blanks fill in with a sequential order
,

VALDI_STANDARD AS (
SELECT HEROS,INFO, REGEXP_REPLACE(HEADERS,'\\(Recommended Level: Lv. \\d+\\)','') AS QUESTS,RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM (

SELECT 'Valdi' AS HEROS,INFO,HEADERS,REGEXP_SUBSTR(HEADERS,'Lv  \\d+') AS RECOMMENDED_LEVEL,'Ascension Quest: Im a Mechanic Walkthrough ' AS ASCENTION_QUEST_NAME
FROM(
SELECT *
FROM(
SELECT MULTI_ROW,FILTER1
FROM VALDI_ORDER
)
PIVOT (
LISTAGG(FILTER1) FOR MULTI_ROW IN(1,2,3,4,5))
)
UNPIVOT( HEADERS FOR INFO IN("1","2","3","4","5"))
)
)

,

HEADERS AS (
SELECT *
FROM STANDARD_QUESTS
WHERE NUMBER IS NOT NULL)
,

VAL AS (
SELECT *,  CASE MOD(ROW_NUMBER() OVER (PARTITION BY HEROS ORDER BY HEROS,ORDER1), 2)
    WHEN 0 THEN 2
    ELSE 1
  END AS ID
FROM(
SELECT *
FROM STANDARD_QUESTS
WHERE NUMBER IS NULL)
)

,

REARRANGE AS (


SELECT A.HEROS,A.FILTER1 AS INFO,B.FILTER1 AS HEADERS,A.ASCENTION_QUEST_NAME,A.ID,ARRAY_SIZE(SPLIT(INFO,' ')) AS NO_WORDS
//ROW_NUMBER() OVER (PARTITION BY HEADERS,A.HEROS ORDER BY (SELECT NULL)) AS G
FROM VAL AS A 
INNER JOIN HEADERS AS B ON B.NUMBER=A.ID AND A.HEROS = B.HEROS
WHERE NO_WORDS < 7 AND INFO NOT LIKE '%span%')

,

THREE_HEROS AS(
SELECT 
HEROS,PAIR_ID,"'Quests'","'Recommended Levels'",ASCENTION_QUEST_NAME
FROM (
SELECT HEROS,INFO,HEADERS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS PAIR_ID,ASCENTION_QUEST_NAME
FROM REARRANGE
WHERE ID = 1
UNION
SELECT HEROS,INFO,HEADERS,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS PAIR_ID,ASCENTION_QUEST_NAME
FROM REARRANGE
WHERE ID= 2 
ORDER BY PAIR_ID)


PIVOT (
MAX(INFO) FOR HEADERS IN ('Quests','Recommended Levels')
)
)


SELECT CAST(HEROS AS VARCHAR(255)) AS HEROS,CAST(TRIM(QUEST) AS VARCHAR(255)) AS QUEST,CAST(RECOMMENDED_LEVEL AS VARCHAR(255)) AS RECOMMENDED_LEVEL ,ASCENTION_QUEST_NAME
FROM ( 
SELECT HEROS,"'Quests'" AS QUEST,"'Recommended Levels'" AS RECOMMENDED_LEVEL,ASCENTION_QUEST_NAME
FROM (
SELECT *
FROM THREE_HEROS
UNION
SELECT *
FROM VALDI_STANDARD
UNION
SELECT *
FROM ALEXANDRIA
UNION
SELECT *
FROM ASHERA
UNION
SELECT *
FROM FIONA
UNION
SELECT *
FROM SEGIRI
UNION
SELECT *
FROM ISURD
)
)
)
;
//Need an ID field that goes up by 1 in a sequential order every time we encounter recommended levels
-- UNION
-- SELECT *
-- FROM VALDI_STANDARD;
;

SELECT *
FROM XC3_COLONIES;